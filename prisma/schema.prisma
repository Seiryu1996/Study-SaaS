// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User progress and enrollments
  enrollments LessonEnrollment[]
  progress    UserProgress[]
  submissions CodeSubmission[]

  @@map("users")
}

model Lesson {
  id          String            @id @default(cuid())
  title       String
  description String
  language    String
  difficulty  LessonDifficulty
  isPublished Boolean           @default(false)
  order       Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Lesson content
  exercises   Exercise[]
  enrollments LessonEnrollment[]

  @@map("lessons")
}

model Exercise {
  id          String   @id @default(cuid())
  lessonId    String
  title       String
  description String
  starterCode String
  solution    String
  hints       String[] // Array of hint strings
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lesson      Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  testCases   TestCase[]
  progress    UserProgress[]
  submissions CodeSubmission[]

  @@map("exercises")
}

model TestCase {
  id             String  @id @default(cuid())
  exerciseId     String
  input          String?
  expectedOutput String
  description    String
  isHidden       Boolean @default(false) // Hidden test cases for validation
  order          Int     @default(0)

  // Relations
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("test_cases")
}

model LessonEnrollment {
  id           String    @id @default(cuid())
  userId       String
  lessonId     String
  enrolledAt   DateTime  @default(now())
  completedAt  DateTime?
  lastAccessAt DateTime  @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_enrollments")
}

model UserProgress {
  id          String    @id @default(cuid())
  userId      String
  exerciseId  String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  attempts    Int       @default(0)
  lastAttempt DateTime  @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseId])
  @@map("user_progress")
}

model CodeSubmission {
  id         String           @id @default(cuid())
  userId     String
  exerciseId String
  code       String
  language   String
  status     SubmissionStatus @default(PENDING)
  output     String?
  error      String?
  score      Int?             @default(0)
  submittedAt DateTime        @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("code_submissions")
}

// Enums
enum LessonDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum SubmissionStatus {
  PENDING
  RUNNING
  PASSED
  FAILED
  ERROR
}